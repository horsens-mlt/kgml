import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#For Anders: 
file_path='C:/Users/ander/OneDrive/Skrivebord/KGML1.csv'

#For Peter: 
file_path='/Users/Peter/Downloads/KGML1.csv'

df=pd.read_csv(file_path,sep=';')
df=pd.DataFrame(data=df)
df.describe()

# inspection of data

df['MPostnr'] = df['MPostnr'].astype('category')
df['MBy'] = df['MBy'].astype('category')
df['AEPostnr'] = df['AEPostnr'].astype('category')
df['AEBy'] = df['AEBy'].astype('category')
df['BPostnr'] = df['BPostnr'].astype('category')
df['BBy'] = df['BBy'].astype('category')
df['B2Postnr'] = df['B2Postnr'].astype('category')
df['B2By'] = df['B2By'].astype('category')
df['B3Postnr'] = df['B3Postnr'].astype('category')
df['B3By'] = df['B3By'].astype('category')

print(df.isnull().sum())
print(df.dtypes)
print(df.describe())


# Import of packages
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff
from plotly.offline import iplot, init_notebook_mode


# Using plotly + cufflinks in offline mode
import cufflinks
cufflinks.go_offline(connected=True)
init_notebook_mode(connected=True)

# Intercorrelation between variables 
df.corr() # Inspect values 

corrs = df.corr() # We plot them visually
figure = ff.create_annotated_heatmap(
    z=corrs.values,
    x=list(corrs.columns),
    y=list(corrs.index),
    annotation_text=corrs.round(2).values,
    showscale=True)
        
figure.iplot()

# Target variable plot
pd.value_counts(df['Target']).plot.bar()
plt.title('Benefit Fraud histogram')
plt.xlabel('Class')
plt.ylabel('Frequency')
    
df['Target'].value_counts()


# Training data split
from sklearn.model_selection import train_test_split

# df=df.drop('id',axis=1)

x=df.iloc[:,1:]
y=df.iloc[:,0]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state = 2)

print('Number of observations and columns in x train', x_train.shape)
print('Number of observations and columns in y train', y_train.shape)
print('Number of observations and columns in x test' , x_test.shape)
print('Number of observations and columns in y test' , y_test.shape)

# From above it is clear that our distribution is highly skewed 
from imblearn.over_sampling import SMOTE

sm=SMOTE(random_state=2)
x_train_res,y_train_res=sm.fit_sample(x_train,y_train)
